{
  "name": "@salesforce/plugin-source",
  "description": "Commands to interact with source formatted metadata",
  "version": "2.10.10",
  "author": "Salesforce",
  "main": "lib/index.js",
  "bugs": "https://github.com/forcedotcom/cli/issues",
  "dependencies": {
    "@oclif/core": "^2.8.5",
    "@salesforce/apex-node": "^1.6.0",
    "@salesforce/core": "^3.36.1",
    "@salesforce/kit": "^1.9.2",
    "@salesforce/sf-plugins-core": "^2.4.3",
    "@salesforce/source-deploy-retrieve": "^8.5.1",
    "@salesforce/source-tracking": "^3.1.5",
    "chalk": "^4.1.2",
    "got": "^11.8.6",
    "proxy-agent": "^5.0.0",
    "proxy-from-env": "^1.1.0",
    "tslib": "^2"
  },
  "devDependencies": {
    "@oclif/plugin-command-snapshot": "^3.3.7",
    "@oclif/plugin-help": "^5.2.6",
    "@salesforce/cli-plugins-testkit": "^3.4.0",
    "@salesforce/dev-config": "^3.1.0",
    "@salesforce/dev-scripts": "^4.3.1",
    "@salesforce/plugin-command-reference": "^2.3.2",
    "@salesforce/plugin-deploy-retrieve": "^1.9.0",
    "@salesforce/plugin-info": "^2.6.13",
    "@salesforce/plugin-settings": "^1.4.9",
    "@salesforce/plugin-templates": "^55.4.15",
    "@salesforce/plugin-user": "^2.3.8",
    "@salesforce/prettier-config": "^0.0.2",
    "@salesforce/source-testkit": "^2.0.59",
    "@salesforce/ts-sinon": "1.4.6",
    "@swc/core": "1.3.39",
    "@types/archiver": "^5.1.1",
    "@types/debug": "^4.1.7",
    "@types/proxy-from-env": "^1.0.1",
    "@types/shelljs": "^0.8.11",
    "@typescript-eslint/eslint-plugin": "^5.42.1",
    "@typescript-eslint/parser": "^5.59.0",
    "archiver": "^5.3.0",
    "chai": "^4.3.4",
    "chai-each": "^0.0.1",
    "cross-env": "^7.0.3",
    "debug": "^4.3.3",
    "eslint": "^8.40.0",
    "eslint-config-prettier": "^8.8.0",
    "eslint-config-salesforce": "^1.1.1",
    "eslint-config-salesforce-license": "^0.2.0",
    "eslint-config-salesforce-typescript": "^1.1.1",
    "eslint-plugin-header": "^3.1.1",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-jsdoc": "^39.9.1",
    "eslint-plugin-sf-plugin": "^1.15.1",
    "fast-glob": "^3.2.12",
    "husky": "^7.0.4",
    "mocha": "^9.1.3",
    "nyc": "^15.1.0",
    "oclif": "^3.8.1",
    "prettier": "^2.8.7",
    "pretty-quick": "^3.1.3",
    "shelljs": "^0.8.5",
    "shx": "0.3.4",
    "sinon": "10.0.0",
    "ts-node": "^10.4.0",
    "typescript": "^4.9.5",
    "wireit": "^0.9.5"
  },
  "config": {},
  "engines": {
    "node": ">=14.0.0"
  },
  "files": [
    "/lib",
    "/messages",
    "/oclif.manifest.json"
  ],
  "homepage": "https://github.com/salesforcecli/plugin-source",
  "keywords": [
    "force",
    "salesforce",
    "sfdx",
    "salesforcedx",
    "sfdx-plugin"
  ],
  "license": "BSD-3-Clause",
  "oclif": {
    "commands": "./lib/commands",
    "bin": "sfdx",
    "devPlugins": [
      "@oclif/plugin-command-snapshot",
      "@oclif/plugin-help",
      "@salesforce/plugin-command-reference",
      "@salesforce/plugin-deploy-retrieve",
      "@salesforce/plugin-templates",
      "@salesforce/plugin-settings",
      "@salesforce/plugin-user"
    ],
    "topics": {
      "force": {
        "subtopics": {
          "source": {
            "description": "commands to interact with source formatted metadata",
            "longDescription": "Use the source commands to push and pull source to and from source-tracked orgs, to deploy and retrieve source to and from orgs, to see synchronization changes between your project and source-tracked orgs, and to convert your source to the metadata format for Metadata API deployments.",
            "subtopics": {
              "deploy": {
                "description": "interact with an active deploy request"
              }
            }
          },
          "mdapi": {
            "description": "deploy, retrieve and convert Metadata API–formatted metadata using Metadata API",
            "longDescription": "Use the mdapi commands to retrieve and deploy Metadata API–formatted files that represent components in an org, or to convert Metadata API–formatted metadata into the source format used in Salesforce DX projects.",
            "subtopics": {
              "deploy": {
                "description": "deploy Metadata API–formatted metadata using Metadata API"
              },
              "retrieve": {
                "description": "retrieve Metadata API–formatted metadata using Metadata API"
              }
            }
          }
        }
      }
    },
    "hooks": {
      "sf-doctor-@salesforce/plugin-source": "./lib/hooks/diagnostics"
    }
  },
  "repository": "salesforcecli/plugin-source",
  "scripts": {
    "build": "wireit",
    "clean": "sf-clean",
    "clean-all": "sf-clean all",
    "clean:lib": "shx rm -rf lib && shx rm -rf coverage && shx rm -rf .nyc_output && shx rm -f oclif.manifest.json",
    "compile": "wireit",
    "docs": "sf-docs",
    "format": "wireit",
    "lint": "wireit",
    "postpack": "shx rm -f oclif.manifest.json",
    "prepack": "sf-prepack",
    "prepare": "sf-install",
    "test": "wireit",
    "test:nuts": "ts-node ./test/nuts/generateNuts.ts && nyc mocha \"**/*.nut.ts\"  --slow 4500 --timeout 1200000 --parallel --retries 0",
    "test:nuts:deploy": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy PLUGIN_SOURCE_SEED_EXCLUDE=async ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:async": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.async ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:destructive": "mocha \"test/nuts/deployDestructive.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:deploy:manifest": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.manifest ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:metadata": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.metadata ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:quick": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.quick ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:rest": "mocha \"test/nuts/REST/*.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --parallel --jobs 20",
    "test:nuts:deploy:sourcepath": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.sourcepath ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:deploy:testlevel": "cross-env PLUGIN_SOURCE_SEED_FILTER=deploy.testlevel ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:mdapi": "mocha \"test/nuts/mdapi.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:retrieve": "cross-env PLUGIN_SOURCE_SEED_FILTER=retrieve ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:retrieve:metadata": "cross-env PLUGIN_SOURCE_SEED_FILTER=retrieve.metadata ts-node ./test/nuts/generateNuts.ts && mocha \"test/nuts/generated/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:specialTypes": "mocha \"test/nuts/territory2.nut.ts\" \"test/nuts/folderTypes.nut.ts\" \"test/nuts/translation.nut.ts\" \"test/nuts/nestedLwc.nut.ts\" \"test/nuts/partialBundleDelete.nut.ts\" --slow 4500 --timeout 1200000 --retries 0 --parallel --jobs 20",
    "test:nuts:specialTypes:folders": "mocha \"test/nuts/folderTypes.nut.ts\" --slow 4500 --timeout 1200000 --jobs 20",
    "test:nuts:specialTypes:nestedLwc": "mocha \"test/nuts/nestedLwc.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20 ",
    "test:nuts:specialTypes:territory2": "mocha \"test/nuts/territory2.nut.ts\" --slow 4500 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:specialTypes:translations": "mocha \"test/nuts/translation.nut.ts\" --slow 4500 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking": "mocha \"test/nuts/trackingCommands/*.nut.ts\" --slow 3000 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:nuts:tracking:basics": "mocha \"test/nuts/trackingCommands/basics.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking:conflicts": "mocha \"test/nuts/trackingCommands/conflicts.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking:flag": "mocha \"test/nuts/trackingCommands/deployRetrieveDelete.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking:forceignore": "mocha \"test/nuts/trackingCommands/forceIgnore.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking:lwc": "mocha \"test/nuts/trackingCommands/lwc.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:tracking:mpd": "mocha \"test/nuts/trackingCommands/mpd*\" --slow 3000 --timeout 1200000 --retries 0 -parallel --jobs 20",
    "test:nuts:tracking:remote": "mocha \"test/nuts/trackingCommands/remoteChanges.nut.ts\" --slow 3000 --timeout 1200000 --retries 0 --jobs 20",
    "test:nuts:deb": "mocha \"test/nuts/digitalExperienceBundle/*.nut.ts\" --slow 4500 --timeout 1200000 --parallel --retries 0 --jobs 20",
    "test:only": "wireit",
    "test:watch": "mocha --watch \"./test/**/*.test.ts\"",
    "version": "oclif readme"
  },
  "publishConfig": {
    "access": "public"
  },
  "wireit": {
    "build": {
      "dependencies": [
        "compile",
        "lint"
      ]
    },
    "compile": {
      "command": "tsc -p . --pretty --incremental",
      "files": [
        "src/**/*.ts",
        "**/tsconfig.json",
        "messages/**"
      ],
      "output": [
        "lib/**",
        "*.tsbuildinfo"
      ],
      "clean": "if-file-deleted"
    },
    "format": {
      "command": "prettier --write \"+(src|test|schemas)/**/*.+(ts|js|json)|command-snapshot.json\"",
      "files": [
        "src/**/*.ts",
        "test/**/*.ts",
        "schemas/**/*.json",
        "command-snapshot.json",
        ".prettier*"
      ],
      "output": []
    },
    "lint": {
      "command": "eslint src test --color --cache --cache-location .eslintcache",
      "files": [
        "src/**/*.ts",
        "test/**/*.ts",
        "messages/**",
        "**/.eslint*",
        "**/tsconfig.json"
      ],
      "output": []
    },
    "test:compile": {
      "command": "tsc -p \"./test\" --pretty",
      "files": [
        "test/**/*.ts",
        "**/tsconfig.json"
      ],
      "output": []
    },
    "test": {
      "dependencies": [
        "test:compile",
        "test:only",
        "test:command-reference",
        "test:deprecation-policy",
        "lint",
        "test:json-schema"
      ]
    },
    "test:only": {
      "command": "nyc mocha \"test/**/*.test.ts\"",
      "env": {
        "FORCE_COLOR": "2"
      },
      "files": [
        "test/**/*.ts",
        "src/**/*.ts",
        "**/tsconfig.json",
        ".mocha*",
        "!*.nut.ts",
        ".nycrc"
      ],
      "output": []
    },
    "test:command-reference": {
      "command": "\"./bin/dev\" commandreference:generate --erroronwarnings",
      "files": [
        "src/**/*.ts",
        "messages/**",
        "package.json"
      ],
      "output": [
        "tmp/root"
      ]
    },
    "test:deprecation-policy": {
      "command": "\"./bin/dev\" snapshot:compare",
      "files": [
        "src/**/*.ts"
      ],
      "output": [],
      "dependencies": [
        "compile"
      ]
    },
    "test:json-schema": {
      "command": "\"./bin/dev\" schema:compare",
      "files": [
        "src/**/*.ts",
        "schemas"
      ],
      "output": []
    }
  }
}
