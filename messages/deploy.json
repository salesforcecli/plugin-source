{
  "description": "deploy source to an org Use this command to deploy source (metadata that’s in source format) to an org.\nTo take advantage of change tracking with scratch orgs, use \"sfdx force:source:push\".\nTo deploy metadata that’s in metadata format, use \"sfdx force:mdapi:deploy\".\n\nThe source you deploy overwrites the corresponding metadata in your org. This command does not attempt to merge your source with the versions in your org.\n\nTo run the command asynchronously, set --wait to 0, which immediately returns the job ID. This way, you can continue to use the CLI.\nTo check the status of the job, use force:source:deploy:report.\n\nIf the comma-separated list you’re supplying contains spaces, enclose the entire comma-separated list in one set of double quotes. On Windows, if the list contains commas, also enclose the entire list in one set of double quotes.\n",
  "examples": [
    "To deploy the source files in a directory:\n\t $ sfdx force:source:deploy -p path/to/source",
    "To deploy a specific Apex class and the objects whose source is in a directory: \n\t$ sfdx force:source:deploy -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
    "To deploy source files in a comma-separated list that contains spaces:\n   $ sfdx force:source:deploy -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
    "To deploy all Apex classes:\n   $ sfdx force:source:deploy -m ApexClass",
    "To deploy a specific Apex class:\n   $ sfdx force:source:deploy -m ApexClass:MyApexClass",
    "To deploy all custom objects and Apex classes:\n   $ sfdx force:source:deploy -m \"CustomObject,ApexClass\"",
    "To deploy all Apex classes and two specific profiles (one of which has a space in its name):\n   $ sfdx force:source:deploy -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
    "To deploy all components listed in a manifest:\n   $ sfdx force:source:deploy -x path/to/package.xml",
    "To run the tests that aren’t in any managed packages as part of a deployment:\n   $ sfdx force:source:deploy -m ApexClass -l RunLocalTests",
    "To check whether a deployment would succeed (to prepare for Quick Deploy):\n   $ sfdx force:source:deploy -m ApexClass -l RunAllTestsInOrg -c",
    "To deploy an already validated deployment (Quick Deploy):\n    $ sfdx force:source:deploy -q 0Af9A00000FTM6pSAH`,"
  ],
  "flags": {
    "sourcePath": "comma-separated list of source file paths to deploy",
    "manifest": "file path for manifest (package.xml) of components to deploy",
    "metadata": "comma-separated list of metadata component names",
    "wait": "wait time for command to finish in minutes",
    "verbose": "verbose output of deploy result",
    "checkonly": "validate deploy but don’t save to the org",
    "testLevel": "deployment testing level",
    "runTests": "tests to run if --testlevel RunSpecifiedTests",
    "ignoreErrors": "ignore any errors and do not roll back deployment",
    "ignoreWarnings": "whether a warning will allow a deployment to complete successfully",
    "validateDeployRequestId": "deploy request ID of the validated deployment to run a Quick Deploy",
    "soapDeploy": "deploy metadata with SOAP API instead of REST API"
  },
  "MissingRequiredParam": "Missing one of the following parameters: %s",
  "checkOnlySuccess": "Successfully validated the deployment. %s components deployed and %s tests run.\nUse the --verbose parameter to see detailed output.",
  "MissingDeployId": "No deploy ID was provided or found in deploy history",
  "deployCanceled": "The deployment has been canceled by %s",
  "deployFailed": "Deploy failed.",
  "asyncDeployQueued": "Deploy has been queued.",
  "asyncDeployCancel": "Run sfdx force:source:deploy:cancel -i %s to cancel the deploy.",
  "asyncDeployReport": "Run sfdx force:source:deploy:report -i %s to get the latest status."
}
