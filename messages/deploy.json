{
  "description": "deploy source to an org",
  "examples": [
    "$ sfdx force:source:deploy -p path/to/source",
    "$ sfdx force:source:deploy -p \"path/to/apex/classes/MyClass.cls,path/to/source/objects\"",
    "$ sfdx force:source:deploy -p \"path/to/objects/MyCustomObject/fields/MyField.field-meta.xml, path/to/apex/classes\"",
    "$ sfdx force:source:deploy -m ApexClass",
    "$ sfdx force:source:deploy -m ApexClass:MyApexClass",
    "$ sfdx force:source:deploy -m \"CustomObject,ApexClass\"",
    "$ sfdx force:source:deploy -m \"ApexClass, Profile:My Profile, Profile: AnotherProfile\"",
    "$ sfdx force:source:deploy -x path/to/package.xml",
    "$ sfdx force:source:deploy -m ApexClass -l RunLocalTests",
    "$ sfdx force:source:deploy -m ApexClass -l RunAllTestsInOrg -c",
    "$ sfdx force:source:deploy -q 0Af9A00000FTM6pSAH"
  ],
  "flags": {
    "sourcePath": "comma-separated list of source file paths to deploy",
    "manifest": "file path for manifest (package.xml) of components to deploy",
    "metadata": "comma-separated list of metadata component names",
    "wait": "wait time for command to finish in minutes",
    "verbose": "verbose output of deploy result",
    "checkonly": "validate deploy but donâ€™t save to the org",
    "testLevel": "deployment testing level",
    "runTests": "tests to run if --testlevel RunSpecifiedTests",
    "ignoreErrors": "ignore any errors and do not roll back deployment",
    "ignoreWarnings": "whether a warning will allow a deployment to complete successfully",
    "validateDeployRequestId": "deploy request ID of the validated deployment to run a Quick Deploy",
    "soapDeploy": "deploy metadata with SOAP API instead of REST API"
  },
  "MissingRequiredParam": "Missing one of the following parameters: %s",
  "checkOnlySuccess": "Successfully validated the deployment. %s components deployed and %s tests run.\nUse the --verbose parameter to see detailed output.",
  "MissingDeployId": "No deploy ID was provided or found in deploy history",
  "deployCanceled": "The deployment has been canceled by %s",
  "deployFailed": "Deploy failed.",
  "asyncDeployQueued": "Deploy has been queued.",
  "asyncDeployCancel": "Run sfdx force:source:deploy:cancel -i %s to cancel the deploy.",
  "asyncDeployReport": "Run sfdx force:source:deploy:report -i %s to get the latest status."
}
